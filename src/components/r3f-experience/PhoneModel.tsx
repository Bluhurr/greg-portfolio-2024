/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Sketcher (https://sketchfab.com/jnanbr07)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/iphone-16-pro-max-light-brown-7c682a89e56e467893a2dceec838cc9c
Title: IPhone 16 Pro Max Light Brown
*/

import * as THREE from "three";
import React, { useState } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Lexend_Tera, Lexend } from "next/font/google";
import { useLoader } from "@react-three/fiber";
import PhoneButton from "@/components/r3f-experience/PhoneButton";
import {
  IoClose,
  IoDocumentText,
  IoMail,
  IoPersonCircle,
} from "react-icons/io5";
import {
  FaExternalLinkAlt,
  FaGithub,
  FaLaptopCode,
  FaLinkedin,
  FaYoutube,
} from "react-icons/fa";
import { BiSolidBriefcase, BiSolidInvader } from "react-icons/bi";
import { TbPacman } from "react-icons/tb";
import { IoIosRocket } from "react-icons/io";

const lexendTera = Lexend_Tera({
  weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
  subsets: ["latin"],
});

const lexend = Lexend({
  weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
  subsets: ["latin"],
});

type GLTFResult = GLTF & {
  nodes: {
    oYNpzWcbFwQIfJl: THREE.Mesh;
    aFkLAtZbLnRfRjs: THREE.Mesh;
    JKfwGlNmeRrDLYJ: THREE.Mesh;
    cBfsSpzDUcvowUC: THREE.Mesh;
    wtwGTXfjQShyttb: THREE.Mesh;
    dwWaYIjRSxJLoPp: THREE.Mesh;
    wQSmejUvUNqmbhU: THREE.Mesh;
    DxhbslRvBZbgGdA: THREE.Mesh;
    togUVTIabJeYWRo: THREE.Mesh;
    UnVLKQxpPuSTpoo: THREE.Mesh;
    cbzsGsrefHBchZX: THREE.Mesh;
    mejqxMFNDeOhlCd: THREE.Mesh;
    GMdHJirUwAzymih: THREE.Mesh;
    RmebgDJTPKTLMhL: THREE.Mesh;
    mMBJxHCcGRuNPgt: THREE.Mesh;
    oMgpDNEzbEgaftd: THREE.Mesh;
    OgdBBmRxnvOsDXN: THREE.Mesh;
    VterbGBYjBaJjKh: THREE.Mesh;
    AyfnpIxllVRAmxK: THREE.Mesh;
    ODIKYsjGnJrGekU: THREE.Mesh;
    NpqsAwkStpbFMyC: THREE.Mesh;
    HnLXJAvcAVmjcmq: THREE.Mesh;
    wGkgsixmLQrhumW: THREE.Mesh;
    pbqVjdBxAkyuCuc: THREE.Mesh;
    YlVLXnLFCOMvYUr: THREE.Mesh;
    YJxlQHLSwZswktq: THREE.Mesh;
    cdIFtaWyStvayob: THREE.Mesh;
    OrjlIEOZEwmKoQF: THREE.Mesh;
    xEzwxUuvvFUAxQI: THREE.Mesh;
    ULrQMePMxypCyge: THREE.Mesh;
    TIoLtcIGzUNefcT: THREE.Mesh;
    eApXSsiYQbvpqpJ: THREE.Mesh;
    DPSzZsZXhOdxcug: THREE.Mesh;
    SBEpYRFSGfLLfQe: THREE.Mesh;
    LJQTvAmcweJXbTO: THREE.Mesh;
    KWeEZTWVbJrzlut: THREE.Mesh;
    sbXXmpkaxinZTSH: THREE.Mesh;
    lYqtZMyrZXOvjKa: THREE.Mesh;
    nmoYsOnqYdHzXKB: THREE.Mesh;
    urvJChMEBqgKNyx: THREE.Mesh;
    TfsDTLtMuODnlNy: THREE.Mesh;
    LvOLydgxHYogzIq: THREE.Mesh;
    vRjWEgoAEHgkXTt: THREE.Mesh;
    TdmnEHbOpVjAsGR: THREE.Mesh;
    EjzogDhKJsbUMnH: THREE.Mesh;
    iyEcSsNSjhMxgPU: THREE.Mesh;
    AHlcBSbQMoYuWYL: THREE.Mesh;
    BQInZDDsEQMeLrR: THREE.Mesh;
    yytbvbbDxoVPaCR: THREE.Mesh;
    AIwHjuTeOClJmPE: THREE.Mesh;
    pAbgjahCfdXKLdU: THREE.Mesh;
    qQSdvSmVUmhAOKj: THREE.Mesh;
    AgcZbKeiEzRlQZA: THREE.Mesh;
    xESmGtADmDjPJCA: THREE.Mesh;
    nRpbEvwDvNzabOW: THREE.Mesh;
    HeCCbnwnGKovvDF: THREE.Mesh;
    cxqLZWgJNODqtaB: THREE.Mesh;
    ISxuKvojHdpyqaC: THREE.Mesh;
    yTOrZJVvvQEQlyb: THREE.Mesh;
    lfCwsPPxEpRctfZ: THREE.Mesh;
    TOCHRODncgAmFQI: THREE.Mesh;
    fCacpqMjepaTRPV: THREE.Mesh;
    ojrnsaqPxYXMBzA: THREE.Mesh;
    BMuENELUyqtgLzA: THREE.Mesh;
    VxFBVgepbQolUjb: THREE.Mesh;
    OrPzBlqJyFVMuJC: THREE.Mesh;
    WQFBwfzKNkKrkrc: THREE.Mesh;
    cJXfETDqynvkWRz: THREE.Mesh;
    nBvElvIhtHWCWNC: THREE.Mesh;
    kMvjMxwLgPydZrK: THREE.Mesh;
    hQDuGwELHvbtXao: THREE.Mesh;
    gmeRFeumwCwoQLY: THREE.Mesh;
    ytJIGRfICGXfnFA: THREE.Mesh;
    AJVcSmuygcRuSpd: THREE.Mesh;
    wILFyjZRrzfEACT: THREE.Mesh;
    bfuMjcyUCqRFavT: THREE.Mesh;
    CnNpnirNqWDkABk: THREE.Mesh;
  };
  materials: {
    DDXqYNJnmfyBgKk: THREE.MeshStandardMaterial;
    XfzzBvdzFDuEvup: THREE.MeshStandardMaterial;
    jhnMnINnbvumpao: THREE.MeshStandardMaterial;
    YpBpDZpjLpaanaL: THREE.MeshStandardMaterial;
    oCGccaHppQzhHwV: THREE.MeshStandardMaterial;
    NlqmgwTyIMokFAP: THREE.MeshStandardMaterial;
    GOEubQCpAAphGgr: THREE.MeshStandardMaterial;
    GeLzGDOtVqOrDhr: THREE.MeshStandardMaterial;
    bZGhUCFPysZorap: THREE.MeshStandardMaterial;
    fGeFmdjlFcfPdJG: THREE.MeshStandardMaterial;
    vnoxXvNvNeEamTs: THREE.MeshStandardMaterial;
    ggpjWYHsgYqbIzB: THREE.MeshStandardMaterial;
    peduMyhMNUgAujm: THREE.MeshStandardMaterial;
    OzjfEwGktnLSjmz: THREE.MeshStandardMaterial;
    hwYoyUQRErhdNNM: THREE.MeshStandardMaterial;
    YrPZPkRjsKutXoK: THREE.MeshStandardMaterial;
    seEtKjsZNNDasfe: THREE.MeshStandardMaterial;
    MhJoTHmIvEGUcwv: THREE.MeshStandardMaterial;
    tbsoTScocvkwZgx: THREE.MeshStandardMaterial;
    eukqsVDWBEAIEob: THREE.MeshStandardMaterial;
    rLteUWYPAWXKgTJ: THREE.MeshStandardMaterial;
    VXaGzGIbEknYLle: THREE.MeshStandardMaterial;
    spHDcrRGgxKHsvY: THREE.MeshStandardMaterial;
    OrMNkgJtuvOhQjD: THREE.MeshStandardMaterial;
    CrWQmMsayGrBlNT: THREE.MeshStandardMaterial;
    EisxmhQsmLZMORa: THREE.MeshStandardMaterial;
    VnDrqHUJQDTudAS: THREE.MeshStandardMaterial;
    bjgzjsrrRgMkese: THREE.MeshStandardMaterial;
    wBgXKkhoHThbRUn: THREE.MeshStandardMaterial;
    OfpnGqWCJfYBCjR: THREE.MeshStandardMaterial;
    WTQhIythhtVLfdx: THREE.MeshStandardMaterial;
    OeUWxAvvZuRPpXZ: THREE.MeshStandardMaterial;
    sTqQsTGZcEjEFnW: THREE.MeshStandardMaterial;
  };
};

export function PhoneModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/iphone_16_pro_max_light_brown.glb"
  ) as GLTFResult;

  const normalMap = useLoader(THREE.TextureLoader, "/normalMap.jpg");

  // Set the texture to repeat
  normalMap.wrapS = normalMap.wrapT = THREE.RepeatWrapping;
  normalMap.repeat.set(0.7, 0.7); // Controls tiling (4 times horizontally and vertically)

  const phoneMetal = new THREE.MeshStandardMaterial({
    color: "#aaa",
    roughness: 0.1,
    metalness: 0.3,
    depthTest: true,
    depthWrite: true,
  });

  const phoneButtons = new THREE.MeshStandardMaterial({
    color: "#00c3ff",
    roughness: 0.5,
    metalness: 0.5,
  });

  const notch = new THREE.MeshStandardMaterial({
    color: "#434343",
    roughness: 0.5,
    metalness: 0.5,
  });

  const screen = new THREE.MeshStandardMaterial({
    color: "#000",
    roughness: 0.02,
    transparent: true,
    opacity: 0.12,
    normalMap: normalMap,
    normalScale: new THREE.Vector2(2, 2),
  });

  const width = 7.7;
  const height = 16.2;
  const x = -width / 2;
  const y = -height / 2;
  const radius = 2;

  const shape = new THREE.Shape();
  shape.moveTo(x, y + radius);
  shape.lineTo(x, y + height - radius);
  shape.quadraticCurveTo(x, y + height, x + radius, y + height);
  shape.lineTo(x + width - radius, y + height);
  shape.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);
  shape.lineTo(x + width, y + radius);
  shape.quadraticCurveTo(x + width, y, x + width - radius, y);
  shape.lineTo(x + radius, y);
  shape.quadraticCurveTo(x, y, x, y + radius);

  const scrollToSection = (
    targetSection: string,
    block: "start" | "end" | "nearest" | "center"
  ) => {
    const target = document.getElementById(targetSection);
    if (target) {
      target.scrollIntoView({ behavior: "smooth", block: block });
    }
  };

  const [embedSite, setEmbedSite] = useState<undefined | null | string>(null);
  const [disclaimer, setDisclaimer] = useState<undefined | null | boolean>(
    null
  );
  const [screenIsOn, setScreenIsOn] = useState<undefined | null | boolean>(
    true
  );
  const [powerButtonPressed, setPowerButtonPressed] = useState(false);

  const showEmbedSite = (href: string, showDisclaimer?: boolean) => {
    setDisclaimer(showDisclaimer);
    setEmbedSite(href);
  };

  const togglePhoneScreen = () => {
    setScreenIsOn(!screenIsOn);
  };

  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={2.5}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={1}>
          <mesh geometry={nodes.oYNpzWcbFwQIfJl.geometry} material={notch} />
          <mesh geometry={nodes.aFkLAtZbLnRfRjs.geometry} material={notch} />
          <mesh geometry={nodes.JKfwGlNmeRrDLYJ.geometry} material={notch} />
          <mesh geometry={nodes.cBfsSpzDUcvowUC.geometry} material={notch} />
          <mesh geometry={nodes.wtwGTXfjQShyttb.geometry} material={notch} />
          <mesh geometry={nodes.dwWaYIjRSxJLoPp.geometry} material={notch} />
          <mesh geometry={nodes.wQSmejUvUNqmbhU.geometry} material={notch} />
          <mesh geometry={nodes.DxhbslRvBZbgGdA.geometry} material={notch} />
          <mesh geometry={nodes.togUVTIabJeYWRo.geometry} material={notch} />
          <mesh geometry={nodes.UnVLKQxpPuSTpoo.geometry} material={notch} />
          <mesh geometry={nodes.cbzsGsrefHBchZX.geometry} material={notch} />
          <mesh
            name="screen"
            geometry={nodes.mejqxMFNDeOhlCd.geometry}
            material={screen}
          />

          <mesh position={[0, 0, 0.38]} scale={0.1}>
            <shapeGeometry args={[shape]} />
            <meshStandardMaterial color={"red"} opacity={0} transparent />
          </mesh>

          <Html
            transform
            occlude="blending"
            className="z-10 w-[293px] h-[635px] rounded-[40px]"
            position={[0, 0, 0.357]}
            geometry={<shapeGeometry args={[shape]}></shapeGeometry>}
          >
            <div className="bg-[#7FEAFF] h-full rounded-[40px] flex justify-center items-center">
              <div
                style={{
                  opacity: screenIsOn ? 0 : 1,
                }}
                className="transition-all duration-[0.75s] pointer-events-none z-[200000] bg-[#202020] w-full h-full absolute rounded-[40px]"
              ></div>
              {embedSite && (
                <div className="absolute w-full h-full bg-black rounded-[40px] z-[10000]">
                  <button
                    onClick={() => {
                      setEmbedSite(null);
                    }}
                    className="absolute top-5 left-5 rounded-lg w-9 h-9 nb-shadow nb-border bg-white z-[100002] flex justify-center items-center"
                  >
                    <IoClose className="w-[90%] h-auto" />
                  </button>
                  <iframe
                    onWheel={(e) => {
                      e.preventDefault();
                      console.log("wheel", e);
                    }}
                    src={embedSite}
                    allow="muted"
                    className="border-none rounded-top-0 overflow-auto pointer-events-auto absolute z-[100000] ml-0 m-auto h-[calc(93%-10%)] w-[100%] bottom-[10%]"
                  ></iframe>
                  {disclaimer && (
                    <div
                      className={`z-[100003] rounded-b-[40px] text-[0.5em] font-bold absolute bottom-0 w-full flex justify-center items-center p-4 ${lexend.className}`}
                    >
                      <p className="nb-border rounded-3xl p-4 bg-[#59E9FF]">
                        <span className="font-black text-[0.75em] inline-block">
                          Disclaimer:
                        </span>{" "}
                        This game was not created by me (that&apos;d be pretty
                        cool huh?). <br />
                        <br />
                        The game displayed is created by its respective
                        author/creator. I do not claim ownership or authorship
                        of the game. It is included to demonstrate 3D embedding
                        capabilities using React Three Fiber and Drei&apos;s
                        HTML element.
                      </p>
                    </div>
                  )}
                </div>
              )}
              {screenIsOn && (
                <div className="bg-[#7FEAFF] flex flex-col w-[90%] pb-[10em] gap-[3em] p-4 overflow-auto scrollbar-phone-ui h-full rounded-[40px] pt-[3em]">
                  <div className="flex justify-center">
                    <img
                      className="rounded-full nb-card w-[13em] h-[13em]"
                      src="/about-me-photo.png"
                      alt="Phone avatar pic"
                    />
                  </div>
                  <div
                    className={`flex flex-col gap-5 justify-center items-center w-full font-semibold ${lexendTera.className}`}
                  >
                    <PhoneButton
                      onClick={() => {
                        scrollToSection("about", "center");
                      }}
                      className="!bg-[#CAFFC7] hover:!bg-[#6DFF88] active:!bg-[#2EEA50]"
                    >
                      <span className="ml-5 mr-auto">About</span>
                      <IoPersonCircle className="w-10 h-10 mr-2" />
                    </PhoneButton>
                    <PhoneButton
                      onClick={() => {
                        scrollToSection("portfolio", "start");
                      }}
                      className="!bg-[#FFE0AA] hover:!bg-[#FBCB77] active:!bg-[#F5AD30]"
                    >
                      <span className="ml-5 mr-auto">Portfolio</span>
                      <BiSolidBriefcase className="w-10 h-10 mr-2" />
                    </PhoneButton>
                    <PhoneButton
                      onClick={() => {
                        scrollToSection("work", "start");
                      }}
                      className="!bg-[#C2C7FF] hover:!bg-[#8D95FF] active:!bg-[#606BFF]"
                    >
                      <span className="ml-5 mr-auto">Work</span>
                      <FaLaptopCode className="w-10 h-10 mr-2" />
                    </PhoneButton>
                    <PhoneButton
                      onClick={() => {
                        scrollToSection("contact", "center");
                      }}
                      className="!bg-[#FFB8C4] hover:!bg-[#FF8C9F] active:!bg-[#FF5F79]"
                    >
                      <span className="ml-5 mr-auto">Contact</span>
                      <IoMail className="w-10 h-10 mr-2" />
                    </PhoneButton>
                    <PhoneButton
                      onClick={() => {
                        showEmbedSite("/GregLawrence_Resume.pdf#zoom=80");
                      }}
                      className="!bg-[#34d5ed] hover:!bg-[#24ecff] active:!bg-[#079fad]"
                    >
                      <span className="ml-5 mr-auto">Resume</span>
                      <IoDocumentText className="w-10 h-10 mr-2" />
                    </PhoneButton>

                    <div className="grid grid-cols-2 gap-4 mt-[0.5em] w-[90%]">
                      <div
                        onClick={() => {
                          showEmbedSite("https://freeinvaders.org/", true);
                        }}
                        className="w-[5.7em] hover:ml-1 mr-auto truncate ml-0 h-[5.3em] flex justify-center items-center phone-ui-button !bg-gradient-to-r !from-purple-500 !to-purple-900"
                      >
                        <BiSolidInvader className="w-10 h-10 text-white" />
                      </div>
                      <div
                        onClick={() => {
                          showEmbedSite("https://freeasteroids.org/", true);
                        }}
                        className="w-[5.7em] hover:ml-1 mr-auto truncate ml-0 h-[5.3em] flex justify-center items-center phone-ui-button !bg-gradient-to-r !from-blue-800 !to-indigo-900"
                      >
                        <IoIosRocket className="w-10 h-10 text-white" />
                      </div>
                      <a
                        href="https://www.linkedin.com/in/greg-lawrence-webdev/"
                        target="_blank"
                        className="w-[5.7em] hover:ml-1 mr-auto truncate ml-0 bg-white h-[5.3em] flex justify-center items-center relative phone-ui-button !bg-gradient-to-r !from-cyan-500 !to-blue-500 !overflow-visible"
                      >
                        <FaLinkedin className="w-10 h-10 text-white" />
                        <FaExternalLinkAlt className="absolute rounded-md top-[-0.4em] right-[-0.5em] w-7 h-7 flex !bg-white !text-black p-1 nb-border" />
                      </a>
                      <div
                        onClick={() => {
                          showEmbedSite("https://freepacman.org/", true);
                        }}
                        className="w-[5.7em] hover:ml-1 mr-auto truncate ml-0 h-[5.3em] flex justify-center items-center phone-ui-button !bg-gradient-to-r !from-amber-200 !to-yellow-500"
                      >
                        <TbPacman className="w-10 h-10 text-white" />
                      </div>
                      <div
                        onClick={() => {
                          showEmbedSite(
                            "https://www.youtube.com/embed/A9wbkbBJcJQ?si=H3a1dXSple-G1CQu",
                            false
                          );
                        }}
                        className="w-[5.7em] hover:ml-1 mr-auto truncate ml-0 bg-white h-[5.3em] flex justify-center items-center phone-ui-button !bg-gradient-to-r !from-rose-400 !to-red-500"
                      >
                        <FaYoutube className="w-10 h-10 text-white" />
                      </div>
                      <a
                        href="https://github.com/Bluhurr"
                        target="_blank"
                        className="relative !overflow-visible w-[5.7em] hover:ml-1 mr-auto truncate ml-0 bg-white h-[5.3em] flex justify-center items-center phone-ui-button !bg-gradient-to-r !from-fuchsia-600 !to-purple-600 !z-[0]"
                      >
                        <FaGithub className="w-10 h-10 text-white" />
                        <FaExternalLinkAlt className="absolute rounded-md top-[-0.4em] right-[-0.5em] w-7 h-7 flex !bg-white !text-black p-1 nb-border" />
                      </a>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </Html>

          <mesh geometry={nodes.GMdHJirUwAzymih.geometry} material={notch} />
          <mesh
            name="bezel"
            geometry={nodes.RmebgDJTPKTLMhL.geometry}
            material={notch}
          />
          <mesh geometry={nodes.OgdBBmRxnvOsDXN.geometry} material={notch} />
          <mesh geometry={nodes.AyfnpIxllVRAmxK.geometry} material={notch} />
          <mesh geometry={nodes.ODIKYsjGnJrGekU.geometry} material={notch} />
          <mesh geometry={nodes.NpqsAwkStpbFMyC.geometry} material={notch} />
          <mesh
            name="rightInnerCamera"
            geometry={nodes.HnLXJAvcAVmjcmq.geometry}
            material={materials.MhJoTHmIvEGUcwv}
          />
          <mesh
            name="leftInnerCamera"
            geometry={nodes.wGkgsixmLQrhumW.geometry}
            material={materials.eukqsVDWBEAIEob}
          />
          <mesh
            name="rightInnerCamera"
            geometry={nodes.pbqVjdBxAkyuCuc.geometry}
            material={materials.eukqsVDWBEAIEob}
          />
          <mesh geometry={nodes.YlVLXnLFCOMvYUr.geometry} material={notch} />
          <mesh geometry={nodes.YJxlQHLSwZswktq.geometry} material={notch} />
          <mesh geometry={nodes.cdIFtaWyStvayob.geometry} material={notch} />
          <mesh
            geometry={nodes.OrjlIEOZEwmKoQF.geometry}
            material={phoneMetal}
          />
          <mesh
            name="powerButtonAgain"
            position={[powerButtonPressed ? -0.025 : 0.04, 0, 0]}
            onClick={() => {
              togglePhoneScreen();
              setPowerButtonPressed(true);
              setTimeout(() => {
                setPowerButtonPressed(false);
              }, 70);
            }}
            onPointerOver={() => {
              document.body.style.cursor = "pointer";
            }}
            onPointerOut={() => {
              document.body.style.cursor = "unset";
              setPowerButtonPressed(false);
            }}
            geometry={nodes.xEzwxUuvvFUAxQI.geometry}
            material={phoneButtons}
          />
          <mesh
            geometry={nodes.ULrQMePMxypCyge.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.TIoLtcIGzUNefcT.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.eApXSsiYQbvpqpJ.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.DPSzZsZXhOdxcug.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.SBEpYRFSGfLLfQe.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.LJQTvAmcweJXbTO.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.KWeEZTWVbJrzlut.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.sbXXmpkaxinZTSH.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.lYqtZMyrZXOvjKa.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.nmoYsOnqYdHzXKB.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.urvJChMEBqgKNyx.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.TfsDTLtMuODnlNy.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.LvOLydgxHYogzIq.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.vRjWEgoAEHgkXTt.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.TdmnEHbOpVjAsGR.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.EjzogDhKJsbUMnH.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.iyEcSsNSjhMxgPU.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.AHlcBSbQMoYuWYL.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.BQInZDDsEQMeLrR.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.yytbvbbDxoVPaCR.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.AIwHjuTeOClJmPE.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.pAbgjahCfdXKLdU.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.qQSdvSmVUmhAOKj.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.AgcZbKeiEzRlQZA.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.xESmGtADmDjPJCA.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.nRpbEvwDvNzabOW.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.HeCCbnwnGKovvDF.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.cxqLZWgJNODqtaB.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.ISxuKvojHdpyqaC.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.yTOrZJVvvQEQlyb.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.lfCwsPPxEpRctfZ.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.TOCHRODncgAmFQI.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.fCacpqMjepaTRPV.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.ojrnsaqPxYXMBzA.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.BMuENELUyqtgLzA.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.VxFBVgepbQolUjb.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.OrPzBlqJyFVMuJC.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.WQFBwfzKNkKrkrc.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.cJXfETDqynvkWRz.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.nBvElvIhtHWCWNC.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.kMvjMxwLgPydZrK.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.hQDuGwELHvbtXao.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.gmeRFeumwCwoQLY.geometry}
            material={materials.sTqQsTGZcEjEFnW}
          />
          <mesh
            geometry={nodes.ytJIGRfICGXfnFA.geometry}
            material={phoneMetal}
          />
          <mesh
            geometry={nodes.AJVcSmuygcRuSpd.geometry}
            material={phoneMetal}
          />
          <mesh
            name="phoneEdges"
            geometry={nodes.wILFyjZRrzfEACT.geometry}
            material={phoneMetal}
          />
          <mesh
            name="antennaThings"
            geometry={nodes.bfuMjcyUCqRFavT.geometry}
            material={materials.OzjfEwGktnLSjmz}
          />
          <mesh
            geometry={nodes.CnNpnirNqWDkABk.geometry}
            material={phoneMetal}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/iphone_16_pro_max_light_brown.glb");
